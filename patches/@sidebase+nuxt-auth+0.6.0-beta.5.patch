diff --git a/node_modules/@sidebase/nuxt-auth/dist/module.json b/node_modules/@sidebase/nuxt-auth/dist/module.json
index 642699f..a44cc0a 100644
--- a/node_modules/@sidebase/nuxt-auth/dist/module.json
+++ b/node_modules/@sidebase/nuxt-auth/dist/module.json
@@ -1,5 +1,5 @@
 {
   "name": "nuxt-auth",
   "configKey": "auth",
-  "version": "0.6.0-beta.4"
+  "version": "0.6.0-beta.5"
 }
\ No newline at end of file
diff --git a/node_modules/@sidebase/nuxt-auth/dist/runtime/composables/local/useAuth.mjs b/node_modules/@sidebase/nuxt-auth/dist/runtime/composables/local/useAuth.mjs
index b48997a..b6c5e8d 100644
--- a/node_modules/@sidebase/nuxt-auth/dist/runtime/composables/local/useAuth.mjs
+++ b/node_modules/@sidebase/nuxt-auth/dist/runtime/composables/local/useAuth.mjs
@@ -1,4 +1,5 @@
 import { readonly } from "vue";
+import axios from 'axios'
 import { callWithNuxt } from "#app";
 import { _fetch } from "../../utils/fetch.mjs";
 import { jsonPointerGet, useTypedBackendConfig } from "../../helpers.mjs";
@@ -7,24 +8,24 @@ import { useAuthState } from "./useAuthState.mjs";
 import { useNuxtApp, useRuntimeConfig, nextTick, navigateTo } from "#imports";
 const signIn = async (credentials, signInOptions, signInParams) => {
   const nuxt = useNuxtApp();
+  const { $axiosClient } = useNuxtApp();
   const config = useTypedBackendConfig(useRuntimeConfig(), "local");
   const { path, method } = config.endpoints.signIn;
-  const response = await _fetch(nuxt, path, {
-    method,
-    body: {
-      ...credentials,
-      ...signInOptions ?? {}
-    },
-    params: signInParams ?? {}
+  const response = await $axiosClient.post('login', {
+    ...credentials,
+    ...signInOptions ?? {}
   });
-  const extractedToken = jsonPointerGet(response, config.token.signInResponseTokenPointer);
+  let extractedToken = response.headers.get('Authorization')
   if (typeof extractedToken !== "string") {
     console.error(`Auth: string token expected, received instead: ${JSON.stringify(extractedToken)}. Tried to find token at ${config.token.signInResponseTokenPointer} in ${JSON.stringify(response)}`);
     return;
   }
-  const { rawToken } = useAuthState();
+  extractedToken = extractedToken.replace('Bearer ', '')
+  axios.defaults.headers.common['Authorization'] = `Bearer ${extractedToken}`
+  const { rawToken, data, lastRefreshedAt } = useAuthState();
   rawToken.value = extractedToken;
-  await nextTick(getSession);
+  data.value = response.data.data
+  lastRefreshedAt.value = new Date();
   const { callbackUrl, redirect = true } = signInOptions ?? {};
   if (redirect) {
     const urlToNavigateTo = callbackUrl ?? await getRequestURLWN(nuxt);
diff --git a/node_modules/@sidebase/nuxt-auth/dist/runtime/plugin.mjs b/node_modules/@sidebase/nuxt-auth/dist/runtime/plugin.mjs
index 609e5bb..b6118bb 100644
--- a/node_modules/@sidebase/nuxt-auth/dist/runtime/plugin.mjs
+++ b/node_modules/@sidebase/nuxt-auth/dist/runtime/plugin.mjs
@@ -1,10 +1,15 @@
 import { addRouteMiddleware, defineNuxtPlugin, useRuntimeConfig } from "#app";
+import { getHeader } from "h3";
 import authMiddleware from "./middleware/auth.mjs";
 import { useAuth, useAuthState } from "#imports";
 export default defineNuxtPlugin(async (nuxtApp) => {
   const { data, lastRefreshedAt } = useAuthState();
   const { getSession } = useAuth();
-  if (typeof data.value === "undefined") {
+  let nitroPrerender = false;
+  if (nuxtApp.ssrContext) {
+    nitroPrerender = getHeader(nuxtApp.ssrContext.event, "x-nitro-prerender") !== void 0;
+  }
+  if (typeof data.value === "undefined" && !nitroPrerender) {
     await getSession();
   }
   const { enableRefreshOnWindowFocus, enableRefreshPeriodically } = useRuntimeConfig().public.auth.session;
